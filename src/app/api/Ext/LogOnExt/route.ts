import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest): Promise<NextResponse> {
  const targetUrl = "https://testlkamur.dvec.ru/Ext/LogOnExt";

  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log("üîπ –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:", req.method, req.url);

    const requestBody = await req.text();
    console.log("üì© –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", requestBody);

    const headers: HeadersInit = {
      "Content-Type": "application/json",
      "Access-Control-Allow-Origin": "*", // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE", // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      "Access-Control-Allow-Headers": "Content-Type, Authorization, Origin", // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    };

    const authHeader = req.headers.get("authorization");
    if (authHeader) {
      headers["Authorization"] = authHeader;
      console.log("üîë –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –Ω–∞–π–¥–µ–Ω");
    }

    console.log("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:", targetUrl);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
    const response = await fetch(targetUrl, {
      method: "POST",
      headers,
      body: requestBody,
    });

    console.log("üîπ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    const data = await response.text();
    console.log("üì© –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ JSON
      const jsonData = JSON.parse(data);
      console.log("üì© –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", JSON.stringify(jsonData, null, 2));

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
      return NextResponse.json(jsonData, { status: response.status });
    } catch (error: any) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", error);
      return NextResponse.json(
        {
          error: "–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON",
          details: error.message,
        },
        { status: 500 }
      );
    }
  } catch (error: unknown) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    if (error instanceof Error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", error.message);
      return NextResponse.json(
        { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API", details: error.message },
        { status: 500 }
      );
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Error
    console.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json(
      { error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API" },
      { status: 500 }
    );
  }
}
